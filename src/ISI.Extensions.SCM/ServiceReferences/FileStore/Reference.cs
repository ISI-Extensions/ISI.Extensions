//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ISI.Extensions.Scm.ServiceReferences.FileStore
{
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.ServiceModel.ServiceContractAttribute(Namespace = "http://www.isi-net.com", ConfigurationName = "FileStore")]
	public interface IFileStore
	{

		[System.ServiceModel.OperationContractAttribute(Action = "http://www.isi-net.com/FileStore/UploadFileSegment", ReplyAction = "http://www.isi-net.com/FileStore/UploadFileSegmentResponse")]
		System.Threading.Tasks.Task<string> UploadFileSegmentAsync(string userName, string password, System.Guid fileStoreUuid, string version, bool finalSegment, byte[] file);
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	public interface FileStoreChannel : IFileStore, System.ServiceModel.IClientChannel
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	public partial class FileStoreClient : System.ServiceModel.ClientBase<IFileStore>, IFileStore
	{

		/// <summary>
		/// Implement this partial method to configure the service endpoint.
		/// </summary>
		/// <param name="serviceEndpoint">The endpoint to configure</param>
		/// <param name="clientCredentials">The client credentials</param>
		static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

		public FileStoreClient(EndpointConfiguration endpointConfiguration) :
			base(FileStoreClient.GetBindingForEndpoint(endpointConfiguration), FileStoreClient.GetEndpointAddress(endpointConfiguration))
		{
			this.Endpoint.Name = endpointConfiguration.ToString();
			ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
		}

		public FileStoreClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
			base(FileStoreClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
		{
			this.Endpoint.Name = endpointConfiguration.ToString();
			ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
		}

		public FileStoreClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
			base(FileStoreClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
		{
			this.Endpoint.Name = endpointConfiguration.ToString();
			ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
		}

		public FileStoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
			base(binding, remoteAddress)
		{
		}

		public System.Threading.Tasks.Task<string> UploadFileSegmentAsync(string userName, string password, System.Guid fileStoreUuid, string version, bool finalSegment, byte[] file)
		{
			return base.Channel.UploadFileSegmentAsync(userName, password, fileStoreUuid, version, finalSegment, file);
		}

		public virtual System.Threading.Tasks.Task OpenAsync()
		{
			return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject) (this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject) (this)).EndOpen));
		}

		public virtual System.Threading.Tasks.Task CloseAsync()
		{
			return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject) (this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject) (this)).EndClose));
		}

		private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
		{
			if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_FileStore))
			{
				System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
				System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
				result.Elements.Add(textBindingElement);
				System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
				httpBindingElement.AllowCookies = true;
				httpBindingElement.MaxBufferSize = int.MaxValue;
				httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
				result.Elements.Add(httpBindingElement);
				return result;
			}

			if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_FileStore1))
			{
				System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
				System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
				result.Elements.Add(textBindingElement);
				System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
				httpsBindingElement.AllowCookies = true;
				httpsBindingElement.MaxBufferSize = int.MaxValue;
				httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
				result.Elements.Add(httpsBindingElement);
				return result;
			}

			throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
		}

		private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
		{
			if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_FileStore))
			{
				return new System.ServiceModel.EndpointAddress("http://www.isi-net.com/file-store/");
			}

			if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_FileStore1))
			{
				return new System.ServiceModel.EndpointAddress("https://www.isi-net.com/file-store/");
			}

			throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
		}

		public enum EndpointConfiguration
		{

			WSHttpBinding_FileStore,

			WSHttpBinding_FileStore1,
		}
	}
}