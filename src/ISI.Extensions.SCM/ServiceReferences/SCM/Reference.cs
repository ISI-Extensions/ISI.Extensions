#region Copyright & License
/*
Copyright (c) 2022, Integrated Solutions, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

		* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
		* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
		* Neither the name of the Integrated Solutions, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#endregion
 

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://scm.isi-net.com/remote-management", ClrNamespace = "ISI.Extensions.Scm.ServiceReferences.SCM")]

namespace ISI.Extensions.Scm.ServiceReferences.Scm
{
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.Runtime.Serialization.CollectionDataContractAttribute(Name = "RevisionInformationCollection", Namespace = "http://scm.isi-net.com/remote-management", ItemName = "RevisionInformation")]
	public class RevisionInformationCollection : System.Collections.Generic.List<ISI.Extensions.Scm.ServiceReferences.Scm.RevisionInformation>
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.Runtime.Serialization.DataContractAttribute(Name = "RevisionInformation", Namespace = "http://scm.isi-net.com/remote-management")]
	public partial class RevisionInformation : object
	{

		private string AuthorField;

		private System.DateTime DateTimeField;

		private ISI.Extensions.Scm.ServiceReferences.Scm.RevisionInformationItemCollection ItemsField;

		private string LogMessageField;

		private long RevisionField;

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Author
		{
			get { return this.AuthorField; }
			set { this.AuthorField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public System.DateTime DateTime
		{
			get { return this.DateTimeField; }
			set { this.DateTimeField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public ISI.Extensions.Scm.ServiceReferences.Scm.RevisionInformationItemCollection Items
		{
			get { return this.ItemsField; }
			set { this.ItemsField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string LogMessage
		{
			get { return this.LogMessageField; }
			set { this.LogMessageField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public long Revision
		{
			get { return this.RevisionField; }
			set { this.RevisionField = value; }
		}
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.Runtime.Serialization.CollectionDataContractAttribute(Name = "RevisionInformationItemCollection", Namespace = "http://scm.isi-net.com/remote-management", ItemName = "RevisionInformationItem")]
	public class RevisionInformationItemCollection : System.Collections.Generic.List<ISI.Extensions.Scm.ServiceReferences.Scm.RevisionInformationItem>
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.Runtime.Serialization.DataContractAttribute(Name = "RevisionInformationItem", Namespace = "http://scm.isi-net.com/remote-management")]
	public partial class RevisionInformationItem : object
	{

		private string ChangeActionField;

		private string NodeTypeField;

		private string PathField;

		[System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue = false)]
		public string ChangeAction
		{
			get { return this.ChangeActionField; }
			set { this.ChangeActionField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue = false)]
		public string NodeType
		{
			get { return this.NodeTypeField; }
			set { this.NodeTypeField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Path
		{
			get { return this.PathField; }
			set { this.PathField = value; }
		}
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.Runtime.Serialization.CollectionDataContractAttribute(Name = "TicketCollection", Namespace = "http://scm.isi-net.com/remote-management", ItemName = "Ticket")]
	public class TicketCollection : System.Collections.Generic.List<ISI.Extensions.Scm.ServiceReferences.Scm.Ticket>
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.Runtime.Serialization.DataContractAttribute(Name = "Ticket", Namespace = "http://scm.isi-net.com/remote-management")]
	public partial class Ticket : object
	{

		private string[] CarbonCopyUsersField;

		private string ComponentField;

		private System.Nullable<System.DateTime> CreateDateTimeField;

		private System.Collections.Generic.Dictionary<string, string> CustomFieldsField;

		private string DescriptionField;

		private string KeywordsField;

		private string MilestoneField;

		private System.Nullable<System.DateTime> ModifyDateTimeField;

		private string OwnerField;

		private string PriorityField;

		private string ReporterField;

		private string ResolutionField;

		private string SeverityField;

		private string StatusField;

		private string SummaryField;

		private System.Nullable<int> TicketIdField;

		private string TypeField;

		private string VersionField;

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string[] CarbonCopyUsers
		{
			get { return this.CarbonCopyUsersField; }
			set { this.CarbonCopyUsersField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Component
		{
			get { return this.ComponentField; }
			set { this.ComponentField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public System.Nullable<System.DateTime> CreateDateTime
		{
			get { return this.CreateDateTimeField; }
			set { this.CreateDateTimeField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public System.Collections.Generic.Dictionary<string, string> CustomFields
		{
			get { return this.CustomFieldsField; }
			set { this.CustomFieldsField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Description
		{
			get { return this.DescriptionField; }
			set { this.DescriptionField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Keywords
		{
			get { return this.KeywordsField; }
			set { this.KeywordsField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Milestone
		{
			get { return this.MilestoneField; }
			set { this.MilestoneField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public System.Nullable<System.DateTime> ModifyDateTime
		{
			get { return this.ModifyDateTimeField; }
			set { this.ModifyDateTimeField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Owner
		{
			get { return this.OwnerField; }
			set { this.OwnerField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Priority
		{
			get { return this.PriorityField; }
			set { this.PriorityField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Reporter
		{
			get { return this.ReporterField; }
			set { this.ReporterField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Resolution
		{
			get { return this.ResolutionField; }
			set { this.ResolutionField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Severity
		{
			get { return this.SeverityField; }
			set { this.SeverityField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Status
		{
			get { return this.StatusField; }
			set { this.StatusField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Summary
		{
			get { return this.SummaryField; }
			set { this.SummaryField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public System.Nullable<int> TicketId
		{
			get { return this.TicketIdField; }
			set { this.TicketIdField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Type
		{
			get { return this.TypeField; }
			set { this.TypeField = value; }
		}

		[System.Runtime.Serialization.DataMemberAttribute()]
		public string Version
		{
			get { return this.VersionField; }
			set { this.VersionField = value; }
		}
	}


	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.ServiceModel.ServiceContractAttribute(Namespace = "http://scm.isi-net.com", ConfigurationName = "RemoteManagement")]
	public interface IRemoteManagement
	{
		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/AddDeployment", ReplyAction = "http://scm.isi-net.com/RemoteManagement/AddDeploymentResponse")]
		System.Threading.Tasks.Task AddDeploymentAsync(string authenticationToken, string component, string version, string sourcePackage, string configurationKey, string targetServer, string targetDirectory, string requestingUserName);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/GetArtifactDateTimeStampVersion", ReplyAction = "http://scm.isi-net.com/RemoteManagement/GetArtifactDateTimeStampVersionResponse")]
		System.Threading.Tasks.Task<string> GetArtifactDateTimeStampVersionAsync(string authenticationToken, string dateTimeStampVersion);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/GetArtifactDateTimeStamp", ReplyAction = "http://scm.isi-net.com/RemoteManagement/GetArtifactDateTimeStampResponse")]
		System.Threading.Tasks.Task<string> GetArtifactDateTimeStampAsync(string authenticationToken, string dateTimeStamp);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/GetBuildArtifactFileExtension", ReplyAction = "http://scm.isi-net.com/RemoteManagement/GetBuildArtifactFileExtensionResponse")]
		System.Threading.Tasks.Task<string> GetBuildArtifactFileExtensionAsync(string authenticationToken, string artifactName, string dateTimeStamp);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/GetBuildArtifactEnvironmentDateTimeStampV" +
		                                                         "ersion", ReplyAction = "http://scm.isi-net.com/RemoteManagement/GetBuildArtifactEnvironmentDateTimeStampV" +
		                                                                                 "ersionResponse")]
		System.Threading.Tasks.Task<string> GetBuildArtifactEnvironmentDateTimeStampVersionAsync(string authenticationToken, string artifactName, string environment);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/NuGetGetApiKey", ReplyAction = "http://scm.isi-net.com/RemoteManagement/NuGetGetApiKeyResponse")]
		System.Threading.Tasks.Task<string> NuGetGetApiKeyAsync(string userName, string password);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/SetBuildArtifactEnvironmentDateTimeStampV" +
		                                                         "ersion", ReplyAction = "http://scm.isi-net.com/RemoteManagement/SetBuildArtifactEnvironmentDateTimeStampV" +
		                                                                                 "ersionResponse")]
		System.Threading.Tasks.Task SetBuildArtifactEnvironmentDateTimeStampVersionAsync(string authenticationToken, string artifactName, string environment, string dateTimeStampVersion);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/GetAuthenticationToken", ReplyAction = "http://scm.isi-net.com/RemoteManagement/GetAuthenticationTokenResponse")]
		System.Threading.Tasks.Task<string> GetAuthenticationTokenAsync(string userName, string password);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/JiraPromoteDeploymentPackage", ReplyAction = "http://scm.isi-net.com/RemoteManagement/JiraPromoteDeploymentPackageResponse")]
		System.Threading.Tasks.Task JiraPromoteDeploymentPackageAsync(string authenticationToken, string description, string jqlQuery, string environmentFieldName, string toEnvironment, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/JiraSendDeploymentFinishEmail", ReplyAction = "http://scm.isi-net.com/RemoteManagement/JiraSendDeploymentFinishEmailResponse")]
		System.Threading.Tasks.Task JiraSendDeploymentFinishEmailAsync(string authenticationToken, string description, string jqlQuery, string environment, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/JiraSendDeploymentStartEmail", ReplyAction = "http://scm.isi-net.com/RemoteManagement/JiraSendDeploymentStartEmailResponse")]
		System.Threading.Tasks.Task JiraSendDeploymentStartEmailAsync(string authenticationToken, string description, string jqlQuery, string environment, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/GetSvnRepositoryNodeLogByRevision", ReplyAction = "http://scm.isi-net.com/RemoteManagement/GetSvnRepositoryNodeLogByRevisionResponse" +
		                                                                                                                                                    "")]
		System.Threading.Tasks.Task<ISI.Extensions.Scm.ServiceReferences.Scm.RevisionInformationCollection> GetSvnRepositoryNodeLogByRevisionAsync(string userName, string password, string repositoryKey, System.Nullable<int> startRevision, System.Nullable<int> stopRevision, string[] authorFilter, string logMessageRegexFilter, string fileNameRegexFilter);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/GetSvnRepositoryNodeLogByDate", ReplyAction = "http://scm.isi-net.com/RemoteManagement/GetSvnRepositoryNodeLogByDateResponse")]
		System.Threading.Tasks.Task<ISI.Extensions.Scm.ServiceReferences.Scm.RevisionInformationCollection> GetSvnRepositoryNodeLogByDateAsync(string userName, string password, string repositoryKey, System.Nullable<System.DateTime> startDateTime, System.Nullable<System.DateTime> stopDateTime, string[] authorFilter, string logMessageRegexFilter, string fileNameRegexFilter);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/GetTracTickets", ReplyAction = "http://scm.isi-net.com/RemoteManagement/GetTracTicketsResponse")]
		System.Threading.Tasks.Task<ISI.Extensions.Scm.ServiceReferences.Scm.TicketCollection> GetTracTicketsAsync(string authenticationToken, string repositoryKey, int[] ticketIds, string component, string[] owners, string[] statuses);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/HipChatSendDeploymentFinishMessage", ReplyAction = "http://scm.isi-net.com/RemoteManagement/HipChatSendDeploymentFinishMessageRespons" +
		                                                                                                                                                     "e")]
		System.Threading.Tasks.Task HipChatSendDeploymentFinishMessageAsync(string authenticationToken, string hipChatUrl, string hipChatAuthenticationToken, string room, string component, string componentVersion, string toEnvironment);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/HipChatSendDeploymentStartMessage", ReplyAction = "http://scm.isi-net.com/RemoteManagement/HipChatSendDeploymentStartMessageResponse" +
		                                                                                                                                                    "")]
		System.Threading.Tasks.Task HipChatSendDeploymentStartMessageAsync(string authenticationToken, string hipChatUrl, string hipChatAuthenticationToken, string room, string component, string componentVersion, string toEnvironment);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/TracTicketsAddHours", ReplyAction = "http://scm.isi-net.com/RemoteManagement/TracTicketsAddHoursResponse")]
		System.Threading.Tasks.Task TracTicketsAddHoursAsync(string authenticationToken, string repositoryKey, int ticketId, System.DateTime startDateTime, System.Nullable<decimal> hours, string comment);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/TracPromoteDeploymentPackage", ReplyAction = "http://scm.isi-net.com/RemoteManagement/TracPromoteDeploymentPackageResponse")]
		System.Threading.Tasks.Task TracPromoteDeploymentPackageAsync(string authenticationToken, string repositoryKey, string component, string componentVersion, string[] fromStatuses, string toStatus, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/TracSendDeploymentFinishEmail", ReplyAction = "http://scm.isi-net.com/RemoteManagement/TracSendDeploymentFinishEmailResponse")]
		System.Threading.Tasks.Task TracSendDeploymentFinishEmailAsync(string authenticationToken, string repositoryKey, string component, string componentVersion, string environment, string toStatus, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/TracSendDeploymentStartEmail", ReplyAction = "http://scm.isi-net.com/RemoteManagement/TracSendDeploymentStartEmailResponse")]
		System.Threading.Tasks.Task TracSendDeploymentStartEmailAsync(string authenticationToken, string repositoryKey, string component, string componentVersion, string[] fromStatuses, string environment, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses);

		[System.ServiceModel.OperationContractAttribute(Action = "http://scm.isi-net.com/RemoteManagement/ValidateAuthenticationToken", ReplyAction = "http://scm.isi-net.com/RemoteManagement/ValidateAuthenticationTokenResponse")]
		System.Threading.Tasks.Task<bool> ValidateAuthenticationTokenAsync(string authenticationToken);
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	public interface IRemoteManagementChannel : IRemoteManagement, System.ServiceModel.IClientChannel
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	public partial class RemoteManagementClient : System.ServiceModel.ClientBase<IRemoteManagement>, IRemoteManagement
	{
		/// <summary>
		/// Implement this partial method to configure the service endpoint.
		/// </summary>
		/// <param name="serviceEndpoint">The endpoint to configure</param>
		/// <param name="clientCredentials">The client credentials</param>
		static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

		public RemoteManagementClient() :
			base(RemoteManagementClient.GetDefaultBinding(), RemoteManagementClient.GetDefaultEndpointAddress())
		{
			this.Endpoint.Name = EndpointConfiguration.ISI_SCM_Web_Interface_Https_Binding_EndPoint.ToString();
			ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
		}

		public RemoteManagementClient(EndpointConfiguration endpointConfiguration) :
			base(RemoteManagementClient.GetBindingForEndpoint(endpointConfiguration), RemoteManagementClient.GetEndpointAddress(endpointConfiguration))
		{
			this.Endpoint.Name = endpointConfiguration.ToString();
			ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
		}

		public RemoteManagementClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
			base(RemoteManagementClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
		{
			this.Endpoint.Name = endpointConfiguration.ToString();
			ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
		}

		public RemoteManagementClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
			base(RemoteManagementClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
		{
			this.Endpoint.Name = endpointConfiguration.ToString();
			ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
		}

		public RemoteManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
			base(binding, remoteAddress)
		{
		}

		public System.Threading.Tasks.Task AddDeploymentAsync(string authenticationToken, string component, string version, string sourcePackage, string configurationKey, string targetServer, string targetDirectory, string requestingUserName)
		{
			return base.Channel.AddDeploymentAsync(authenticationToken, component, version, sourcePackage, configurationKey, targetServer, targetDirectory, requestingUserName);
		}

		public System.Threading.Tasks.Task<string> GetArtifactDateTimeStampVersionAsync(string authenticationToken, string dateTimeStampVersion)
		{
			return base.Channel.GetArtifactDateTimeStampVersionAsync(authenticationToken, dateTimeStampVersion);
		}

		public System.Threading.Tasks.Task<string> GetArtifactDateTimeStampAsync(string authenticationToken, string dateTimeStamp)
		{
			return base.Channel.GetArtifactDateTimeStampAsync(authenticationToken, dateTimeStamp);
		}

		public System.Threading.Tasks.Task<string> GetBuildArtifactFileExtensionAsync(string authenticationToken, string artifactName, string dateTimeStamp)
		{
			return base.Channel.GetBuildArtifactFileExtensionAsync(authenticationToken, artifactName, dateTimeStamp);
		}

		public System.Threading.Tasks.Task<string> GetBuildArtifactEnvironmentDateTimeStampVersionAsync(string authenticationToken, string artifactName, string environment)
		{
			return base.Channel.GetBuildArtifactEnvironmentDateTimeStampVersionAsync(authenticationToken, artifactName, environment);
		}

		public System.Threading.Tasks.Task<string> NuGetGetApiKeyAsync(string userName, string password)
		{
			return base.Channel.NuGetGetApiKeyAsync(userName, password);
		}

		public System.Threading.Tasks.Task SetBuildArtifactEnvironmentDateTimeStampVersionAsync(string authenticationToken, string artifactName, string environment, string dateTimeStampVersion)
		{
			return base.Channel.SetBuildArtifactEnvironmentDateTimeStampVersionAsync(authenticationToken, artifactName, environment, dateTimeStampVersion);
		}

		public System.Threading.Tasks.Task<string> GetAuthenticationTokenAsync(string userName, string password)
		{
			return base.Channel.GetAuthenticationTokenAsync(userName, password);
		}

		public System.Threading.Tasks.Task JiraPromoteDeploymentPackageAsync(string authenticationToken, string description, string jqlQuery, string environmentFieldName, string toEnvironment, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses)
		{
			return base.Channel.JiraPromoteDeploymentPackageAsync(authenticationToken, description, jqlQuery, environmentFieldName, toEnvironment, emailAddresses, addTicketReporterToEmailAddresses, addTicketOwnerToEmailAddresses, addTicketCarbonCopysToEmailAddresses);
		}

		public System.Threading.Tasks.Task JiraSendDeploymentFinishEmailAsync(string authenticationToken, string description, string jqlQuery, string environment, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses)
		{
			return base.Channel.JiraSendDeploymentFinishEmailAsync(authenticationToken, description, jqlQuery, environment, emailAddresses, addTicketReporterToEmailAddresses, addTicketOwnerToEmailAddresses, addTicketCarbonCopysToEmailAddresses);
		}

		public System.Threading.Tasks.Task JiraSendDeploymentStartEmailAsync(string authenticationToken, string description, string jqlQuery, string environment, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses)
		{
			return base.Channel.JiraSendDeploymentStartEmailAsync(authenticationToken, description, jqlQuery, environment, emailAddresses, addTicketReporterToEmailAddresses, addTicketOwnerToEmailAddresses, addTicketCarbonCopysToEmailAddresses);
		}

		public System.Threading.Tasks.Task<ISI.Extensions.Scm.ServiceReferences.Scm.RevisionInformationCollection> GetSvnRepositoryNodeLogByRevisionAsync(string userName, string password, string repositoryKey, System.Nullable<int> startRevision, System.Nullable<int> stopRevision, string[] authorFilter, string logMessageRegexFilter, string fileNameRegexFilter)
		{
			return base.Channel.GetSvnRepositoryNodeLogByRevisionAsync(userName, password, repositoryKey, startRevision, stopRevision, authorFilter, logMessageRegexFilter, fileNameRegexFilter);
		}

		public System.Threading.Tasks.Task<ISI.Extensions.Scm.ServiceReferences.Scm.RevisionInformationCollection> GetSvnRepositoryNodeLogByDateAsync(string userName, string password, string repositoryKey, System.Nullable<System.DateTime> startDateTime, System.Nullable<System.DateTime> stopDateTime, string[] authorFilter, string logMessageRegexFilter, string fileNameRegexFilter)
		{
			return base.Channel.GetSvnRepositoryNodeLogByDateAsync(userName, password, repositoryKey, startDateTime, stopDateTime, authorFilter, logMessageRegexFilter, fileNameRegexFilter);
		}

		public System.Threading.Tasks.Task<ISI.Extensions.Scm.ServiceReferences.Scm.TicketCollection> GetTracTicketsAsync(string authenticationToken, string repositoryKey, int[] ticketIds, string component, string[] owners, string[] statuses)
		{
			return base.Channel.GetTracTicketsAsync(authenticationToken, repositoryKey, ticketIds, component, owners, statuses);
		}

		public System.Threading.Tasks.Task HipChatSendDeploymentFinishMessageAsync(string authenticationToken, string hipChatUrl, string hipChatAuthenticationToken, string room, string component, string componentVersion, string toEnvironment)
		{
			return base.Channel.HipChatSendDeploymentFinishMessageAsync(authenticationToken, hipChatUrl, hipChatAuthenticationToken, room, component, componentVersion, toEnvironment);
		}

		public System.Threading.Tasks.Task HipChatSendDeploymentStartMessageAsync(string authenticationToken, string hipChatUrl, string hipChatAuthenticationToken, string room, string component, string componentVersion, string toEnvironment)
		{
			return base.Channel.HipChatSendDeploymentStartMessageAsync(authenticationToken, hipChatUrl, hipChatAuthenticationToken, room, component, componentVersion, toEnvironment);
		}

		public System.Threading.Tasks.Task TracTicketsAddHoursAsync(string authenticationToken, string repositoryKey, int ticketId, System.DateTime startDateTime, System.Nullable<decimal> hours, string comment)
		{
			return base.Channel.TracTicketsAddHoursAsync(authenticationToken, repositoryKey, ticketId, startDateTime, hours, comment);
		}

		public System.Threading.Tasks.Task TracPromoteDeploymentPackageAsync(string authenticationToken, string repositoryKey, string component, string componentVersion, string[] fromStatuses, string toStatus, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses)
		{
			return base.Channel.TracPromoteDeploymentPackageAsync(authenticationToken, repositoryKey, component, componentVersion, fromStatuses, toStatus, emailAddresses, addTicketReporterToEmailAddresses, addTicketOwnerToEmailAddresses, addTicketCarbonCopysToEmailAddresses);
		}

		public System.Threading.Tasks.Task TracSendDeploymentFinishEmailAsync(string authenticationToken, string repositoryKey, string component, string componentVersion, string environment, string toStatus, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses)
		{
			return base.Channel.TracSendDeploymentFinishEmailAsync(authenticationToken, repositoryKey, component, componentVersion, environment, toStatus, emailAddresses, addTicketReporterToEmailAddresses, addTicketOwnerToEmailAddresses, addTicketCarbonCopysToEmailAddresses);
		}

		public System.Threading.Tasks.Task TracSendDeploymentStartEmailAsync(string authenticationToken, string repositoryKey, string component, string componentVersion, string[] fromStatuses, string environment, string[] emailAddresses, bool addTicketReporterToEmailAddresses, bool addTicketOwnerToEmailAddresses, bool addTicketCarbonCopysToEmailAddresses)
		{
			return base.Channel.TracSendDeploymentStartEmailAsync(authenticationToken, repositoryKey, component, componentVersion, fromStatuses, environment, emailAddresses, addTicketReporterToEmailAddresses, addTicketOwnerToEmailAddresses, addTicketCarbonCopysToEmailAddresses);
		}

		public System.Threading.Tasks.Task<bool> ValidateAuthenticationTokenAsync(string authenticationToken)
		{
			return base.Channel.ValidateAuthenticationTokenAsync(authenticationToken);
		}

		public virtual System.Threading.Tasks.Task OpenAsync()
		{
			return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject) (this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject) (this)).EndOpen));
		}

		public virtual System.Threading.Tasks.Task CloseAsync()
		{
			return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject) (this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject) (this)).EndClose));
		}

		private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
		{
			if ((endpointConfiguration == EndpointConfiguration.ISI_SCM_Web_Interface_Https_Binding_EndPoint))
			{
				System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
				System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
				result.Elements.Add(textBindingElement);
				System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
				httpsBindingElement.AllowCookies = true;
				httpsBindingElement.MaxBufferSize = int.MaxValue;
				httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
				result.Elements.Add(httpsBindingElement);
				return result;
			}

			throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
		}

		private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
		{
			if ((endpointConfiguration == EndpointConfiguration.ISI_SCM_Web_Interface_Https_Binding_EndPoint))
			{
				return new System.ServiceModel.EndpointAddress("https://scm.isi-net.com/remote-management");
			}

			throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
		}

		private static System.ServiceModel.Channels.Binding GetDefaultBinding()
		{
			return RemoteManagementClient.GetBindingForEndpoint(EndpointConfiguration.ISI_SCM_Web_Interface_Https_Binding_EndPoint);
		}

		private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
		{
			return RemoteManagementClient.GetEndpointAddress(EndpointConfiguration.ISI_SCM_Web_Interface_Https_Binding_EndPoint);
		}

		public enum EndpointConfiguration
		{

			ISI_SCM_Web_Interface_Https_Binding_EndPoint,
		}
	}
}